const path = require('path');

const truffleConfig = require('truffle-config');
const findUp = require('find-up');
const flatten = require('array-flatten');
const { existsSync } = require('fs');

const { readFile } = require('./util');

// Finds truffle conifg file path
const getTruffleConfig = async (opts) => {
  let file = await findUp('truffle-config.js', opts);
  if (!file) file = await findUp('truffle.js', opts);
  return file;
};

// Loads truffle config
const getConfig = async ({ network, cwd }) => {
  if (!network) {
    throw new Error('You must specify the network name to deploy to.');
  }

  let config;
  const truffleConfigPath = await getTruffleConfig({ cwd });
  if (truffleConfigPath) {
    config = truffleConfig.load(truffleConfigPath, { network });
  } else {
    throw new Error('No Truffle Config file found!');
  }

  return config;
};

// Extracts ImportDirective directives from contract .json generated by Truffle
const getLocalDependencies = async (contractName, contractsBuildDirectory, contractFolderPath) => {

  const filePathByName = name => path.resolve(contractFolderPath, `${name}.sol`);

  const compiledContractPath = path
    .resolve(contractsBuildDirectory, `${contractName}.json`);

  // read JSON contract produced by compile and return it
  const solJSON = await readFile(compiledContractPath, 'utf8');

  const contract = JSON.parse(solJSON);

  // grab all base contracts
  const localBaseContracts = ((((contract.ast || {})
    .nodes || [])
    .filter(node => node.nodeType === 'ContractDefinition')[0] || {})
    .baseContracts || [])
    // grab base contract name
    .map(node => node.baseName.name)
    // test if it is exists locally
    .filter(name => existsSync(filePathByName(name)));

  // return an array of contract .sol file paths as local dependencies
  return [
    ...localBaseContracts
    // build local contract filepath
      .map(name => filePathByName(name)),
    // call recursive on all local base contracts
    ...flatten(await Promise.all(localBaseContracts
      .map(name => getLocalDependencies(name, contractsBuildDirectory, contractFolderPath)))),
  ];
};

module.exports = {
  getConfig,
  getLocalDependencies,
};
